// Code generated by mockery. DO NOT EDIT.

package mock

import (
	user "github.com/sebajax/go-vertical-slice-architecture/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetByEmail(email string) (*user.User, bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *user.User
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserRepository_Expecter) GetByEmail(email interface{}) *UserRepository_GetByEmail_Call {
	return &UserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *UserRepository_GetByEmail_Call) Run(run func(email string)) *UserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepository_GetByEmail_Call) Return(_a0 *user.User, _a1 bool, _a2 error) *UserRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserRepository_GetByEmail_Call) RunAndReturn(run func(string) (*user.User, bool, error)) *UserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: u
func (_m *UserRepository) Save(u *user.User) (int64, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (int64, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*user.User) int64); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type UserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - u *user.User
func (_e *UserRepository_Expecter) Save(u interface{}) *UserRepository_Save_Call {
	return &UserRepository_Save_Call{Call: _e.mock.On("Save", u)}
}

func (_c *UserRepository_Save_Call) Run(run func(u *user.User)) *UserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *UserRepository_Save_Call) Return(_a0 int64, _a1 error) *UserRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Save_Call) RunAndReturn(run func(*user.User) (int64, error)) *UserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
